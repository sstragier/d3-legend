{"version":3,"file":null,"sources":["src/legend.js","src/color.js","src/size.js","src/symbol.js","src/helpers.js","index.js"],"sourcesContent":["export default {\r\n\r\n  d3_identity: function (d) {\r\n    return d;\r\n  },\r\n\r\n  d3_mergeLabels: function (gen=[], labels, domain, range) {\r\n\r\n      if (typeof labels === \"object\"){\r\n        if(labels.length === 0) return gen;\r\n\r\n        let i = labels.length;\r\n        for (; i < gen.length; i++) {\r\n          labels.push(gen[i]);\r\n        }\r\n        return labels;\r\n      } else if (typeof labels === \"function\") {\r\n        const customLabels = []\r\n        const genLength = gen.length\r\n        for (let i=0; i < genLength; i++){\r\n          customLabels.push(labels({\r\n            i, \r\n            genLength,\r\n            generatedLabels : gen,\r\n            domain,\r\n            range }))\r\n        }\r\n        return customLabels\r\n      }\r\n\r\n      return gen;\r\n    },\r\n\r\n  d3_linearLegend: function (scale, cells, labelFormat) {\r\n    var data = [];\r\n\r\n    if (cells.length > 1){\r\n      data = cells;\r\n\r\n    } else {\r\n      var domain = scale.domain(),\r\n      increment = (domain[domain.length - 1] - domain[0])/(cells - 1),\r\n      i = 0;\r\n\r\n      for (; i < cells; i++){\r\n        data.push(domain[0] + i*increment);\r\n      }\r\n    }\r\n\r\n    var labels = data.map(labelFormat);\r\n\r\n    return {data: data,\r\n            labels: labels,\r\n            feature: function(d){ return scale(d); }};\r\n  },\r\n\r\n  d3_quantLegend: function (scale, labelFormat, labelDelimiter) {\r\n    var labels = scale.range().map(function(d){\r\n      var invert = scale.invertExtent(d);\r\n\r\n      return labelFormat(invert[0]) + \" \" + labelDelimiter + \" \" + labelFormat(invert[1]);\r\n\r\n    });\r\n\r\n    return {data: scale.range(),\r\n            labels: labels,\r\n            feature: this.d3_identity\r\n          };\r\n  },\r\n\r\n  d3_ordinalLegend: function (scale) {\r\n    return {data: scale.domain(),\r\n            labels: scale.domain(),\r\n            feature: function(d){ return scale(d); }};\r\n  },\r\n\r\n  d3_drawShapes: function (shape, shapes, shapeHeight, shapeWidth, shapeRadius, path) {\r\n    if (shape === \"rect\"){\r\n        shapes.attr(\"height\", shapeHeight).attr(\"width\", shapeWidth);\r\n\r\n    } else if (shape === \"circle\") {\r\n        shapes.attr(\"r\", shapeRadius)//.attr(\"cx\", shapeRadius).attr(\"cy\", shapeRadius);\r\n\r\n    } else if (shape === \"line\") {\r\n        shapes.attr(\"x1\", 0).attr(\"x2\", shapeWidth).attr(\"y1\", 0).attr(\"y2\", 0);\r\n\r\n    } else if (shape === \"path\") {\r\n      shapes.attr(\"d\", path);\r\n    }\r\n  },\r\n\r\n  d3_addText: function (svg, enter, labels, classPrefix){\r\n    enter.append(\"text\").attr(\"class\", classPrefix + \"label\");\r\n    svg.selectAll(\"g.\" + classPrefix + \"cell text\").data(labels).text(this.d3_identity);\r\n  },\r\n\r\n  d3_calcType: function (scale, ascending, cells, labels, labelFormat, labelDelimiter){\r\n    var type = scale.invertExtent ?\r\n            this.d3_quantLegend(scale, labelFormat, labelDelimiter) : scale.ticks ?\r\n            this.d3_linearLegend(scale, cells, labelFormat) : this.d3_ordinalLegend(scale);\r\n\r\n    type.labels = this.d3_mergeLabels(type.labels, labels, scale.domain(), scale.range());\r\n\r\n    if (ascending) {\r\n      type.labels = this.d3_reverse(type.labels);\r\n      type.data = this.d3_reverse(type.data);\r\n    }\r\n\r\n    return type;\r\n  },\r\n\r\n  d3_reverse: function(arr) {\r\n    var mirror = [];\r\n    for (var i = 0, l = arr.length; i < l; i++) {\r\n      mirror[i] = arr[l-i-1];\r\n    }\r\n    return mirror;\r\n  },\r\n\r\n  d3_placement: function (orient, cell, cellTrans, text, textTrans, labelAlign, shape, shapeTrans) {\r\n    cell.attr(\"transform\", cellTrans);\r\n    text.attr(\"transform\", textTrans);\r\n    if (orient === \"horizontal\"){\r\n      text.style(\"text-anchor\", labelAlign);\r\n    }\r\n    if (shape && shapeTrans) shape.attr(\"transform\", shapeTrans);\r\n  },\r\n\r\n  d3_addEvents: function(cells, dispatcher){\r\n    var _ = this;\r\n\r\n      cells.on(\"mouseover.legend\", function (d) { _.d3_cellOver(dispatcher, d, this); })\r\n          .on(\"mouseout.legend\", function (d) { _.d3_cellOut(dispatcher, d, this); })\r\n          .on(\"click.legend\", function (d) { _.d3_cellClick(dispatcher, d, this); });\r\n  },\r\n\r\n  d3_cellOver: function(cellDispatcher, d, obj){\r\n    cellDispatcher.call(\"cellover\", obj, d);\r\n  },\r\n\r\n  d3_cellOut: function(cellDispatcher, d, obj){\r\n    cellDispatcher.call(\"cellout\", obj, d);\r\n  },\r\n\r\n  d3_cellClick: function(cellDispatcher, d, obj){\r\n    cellDispatcher.call(\"cellclick\", obj, d);\r\n  },\r\n\r\n  d3_title: function(svg, title, classPrefix){\r\n    if (title !== \"\"){\r\n\r\n      var titleText = svg.selectAll('text.' + classPrefix + 'legendTitle');\r\n\r\n      titleText.data([title])\r\n        .enter()\r\n        .append('text')\r\n        .attr('class', classPrefix + 'legendTitle');\r\n\r\n        svg.selectAll('text.' + classPrefix + 'legendTitle')\r\n            .text(title)\r\n\r\n      var cellsSvg = svg.select('.' + classPrefix + 'legendCells')\r\n\r\n      var yOffset = svg.select('.' + classPrefix + 'legendTitle').nodes()\r\n          .map(function(d) { return d.getBBox().height})[0],\r\n      xOffset = -cellsSvg.nodes().map(function(d) { return d.getBBox().x})[0];\r\n\r\n      cellsSvg.attr('transform', 'translate(' + xOffset + ',' + (yOffset + 10) + ')');\r\n\r\n    }\r\n  }\r\n}\r\n","import helper from './legend';\r\nimport { dispatch } from 'd3-dispatch';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { format } from 'd3-format';\r\nimport { sum } from 'd3-array';\r\n\r\nexport default function color(){\r\n\r\n  var scale = scaleLinear(),\r\n    shape = \"rect\",\r\n    shapeWidth = 15,\r\n    shapeHeight = 15,\r\n    shapeRadius = 10,\r\n    shapePadding = 2,\r\n    cells = [5],\r\n    labels = [],\r\n    classPrefix = \"\",\r\n    useClass = false,\r\n    title = \"\",\r\n    labelFormat = format(\".01f\"),\r\n    labelOffset = 10,\r\n    labelAlign = \"middle\",\r\n    labelDelimiter = \"to\",\r\n    orient = \"vertical\",\r\n    ascending = false,\r\n    path,\r\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\r\n\r\n    function legend(svg){\r\n\r\n      var type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\r\n        legendG = svg.selectAll('g').data([scale]);\r\n\r\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\r\n\r\n      var cell = svg.select('.' + classPrefix + 'legendCells')\r\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data),\r\n        cellEnter = cell.enter().append(\"g\")\r\n          .attr(\"class\", classPrefix + \"cell\"),//.merge(cell).style(\"opacity\", 1e-6),\r\n        shapeEnter = cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\"),\r\n        shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\r\n\r\n      //add event handlers\r\n      helper.d3_addEvents(cellEnter, legendDispatcher);\r\n\r\n      cell.exit().transition().style(\"opacity\", 0).remove();\r\n\r\n      helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path);\r\n\r\n\r\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix)\r\n      \r\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\r\n      cell = cellEnter.merge(cell);\r\n\r\n      // sets placement\r\n      var text = svg.selectAll(\"g.\" + classPrefix + \"cell text\"),\r\n        textSize = text.nodes().map( function(d){ return d.getBBox(); }),\r\n        shapeSize = shapes.nodes().map( function(d){ return d.getBBox(); }),\r\n        // Determine the width the cell needs to be to include the shape and text (for horizontal orientation)\r\n        cellWidths = shapeSize.map( function(d, i){\r\n          if (orient === \"horizontal\" && textSize[i].width > d.width) {\r\n              return textSize[i].width\r\n          } else {\r\n              d.width;\r\n          }\r\n        });\r\n\r\n      //sets scale\r\n      //everything is fill except for line which is stroke,\r\n      if (!useClass){\r\n        if (shape == \"line\"){\r\n          shapes.style(\"stroke\", type.feature);\r\n        } else {\r\n          shapes.style(\"fill\", type.feature);\r\n        }\r\n      } else {\r\n        shapes.attr(\"class\", function(d){ return classPrefix + \"swatch \" + type.feature(d); });\r\n      }\r\n\r\n      var cellTrans,\r\n        shapeTrans,\r\n        textTrans,\r\n        textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\r\n\r\n      //positions cells and text\r\n      if (orient === \"vertical\"){\r\n        cellTrans = function(d,i) { return \"translate(0, \" + (i * (shapeSize[i].height + shapePadding)) + \")\"; };\r\n        textTrans = function(d,i) { return \"translate(\" + (shapeSize[i].width + shapeSize[i].x +\r\n          labelOffset) + \",\" + (shapeSize[i].y + shapeSize[i].height/2 + 5) + \")\"; };\r\n\r\n      } else if (orient === \"horizontal\"){\r\n        cellTrans = function(d,i) {\r\n          var previousCellWidths = sum(cellWidths.slice(0, i));\r\n          return \"translate(\" + (previousCellWidths + i * shapePadding) + \",0)\";\r\n        };\r\n        shapeTrans = function(d,i) {\r\n          var x = (cellWidths[i] - shapeSize[i].width) * textAlign;\r\n          return \"translate(\" + x + \", 0)\";\r\n        };\r\n        textTrans = function(d,i) { return \"translate(\" + (cellWidths[i] * textAlign) +\r\n          \",\" + (shapeSize[i].height + shapeSize[i].y + labelOffset + 8) + \")\"; };\r\n      }\r\n\r\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign, shapes, shapeTrans);\r\n      helper.d3_title(svg, title, classPrefix);\r\n\r\n      cell.transition().style(\"opacity\", 1);\r\n\r\n    }\r\n\r\n\r\n\r\n  legend.scale = function(_) {\r\n    if (!arguments.length) return scale;\r\n    scale = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.cells = function(_) {\r\n    if (!arguments.length) return cells;\r\n    if (_.length > 1 || _ >= 2 ){\r\n      cells = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.shape = function(_, d) {\r\n    if (!arguments.length) return shape;\r\n    if (_ == \"rect\" || _ == \"circle\" || _ == \"line\" || (_ == \"path\" && (typeof d === 'string')) ){\r\n      shape = _;\r\n      path = d;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.shapeWidth = function(_) {\r\n    if (!arguments.length) return shapeWidth;\r\n    shapeWidth = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.shapeHeight = function(_) {\r\n    if (!arguments.length) return shapeHeight;\r\n    shapeHeight = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.shapeRadius = function(_) {\r\n    if (!arguments.length) return shapeRadius;\r\n    shapeRadius = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.shapePadding = function(_) {\r\n    if (!arguments.length) return shapePadding;\r\n    shapePadding = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.labels = function(_) {\r\n    if (!arguments.length) return labels;\r\n    labels = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelAlign = function(_) {\r\n    if (!arguments.length) return labelAlign;\r\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\r\n      labelAlign = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.labelFormat = function(_) {\r\n    if (!arguments.length) return labelFormat;\r\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelOffset = function(_) {\r\n    if (!arguments.length) return labelOffset;\r\n    labelOffset = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelDelimiter = function(_) {\r\n    if (!arguments.length) return labelDelimiter;\r\n    labelDelimiter = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.useClass = function(_) {\r\n    if (!arguments.length) return useClass;\r\n    if (_ === true || _ === false){\r\n      useClass = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.orient = function(_){\r\n    if (!arguments.length) return orient;\r\n    _ = _.toLowerCase();\r\n    if (_ == \"horizontal\" || _ == \"vertical\") {\r\n      orient = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.ascending = function(_) {\r\n    if (!arguments.length) return ascending;\r\n    ascending = !!_;\r\n    return legend;\r\n  };\r\n\r\n  legend.classPrefix = function(_) {\r\n    if (!arguments.length) return classPrefix;\r\n    classPrefix = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.title = function(_) {\r\n    if (!arguments.length) return title;\r\n    title = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.on = function(){\r\n    var value = legendDispatcher.on.apply(legendDispatcher, arguments)\r\n    return value === legendDispatcher ? legend : value;\r\n  }\r\n\r\n  return legend;\r\n\r\n};\r\n","import helper from './legend';\r\nimport { dispatch } from 'd3-dispatch';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { format } from 'd3-format';\r\nimport { sum, max } from 'd3-array';\r\n\r\nexport default function size(){\r\n\r\n  var scale = scaleLinear(),\r\n    shape = \"rect\",\r\n    shapeWidth = 15,\r\n    shapePadding = 2,\r\n    cells = [5],\r\n    labels = [],\r\n    useStroke = false,\r\n    classPrefix = \"\",\r\n    title = \"\",\r\n    labelFormat = format(\".01f\"),\r\n    labelOffset = 10,\r\n    labelAlign = \"middle\",\r\n    labelDelimiter = \"to\",\r\n    orient = \"vertical\",\r\n    ascending = false,\r\n    path,\r\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\r\n\r\n    function legend(svg){\r\n\r\n      var type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\r\n        legendG = svg.selectAll('g').data([scale]);\r\n\r\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\r\n\r\n      var cell = svg.select('.' + classPrefix + 'legendCells')\r\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data),\r\n        cellEnter = cell.enter().append(\"g\")\r\n          .attr(\"class\", classPrefix + \"cell\"),//.merge(cell).style(\"opacity\", 1e-6),\r\n        shapeEnter = cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\"),\r\n        shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\r\n\r\n      //add event handlers\r\n      helper.d3_addEvents(cellEnter, legendDispatcher);\r\n\r\n      cell.exit().transition().style(\"opacity\", 0).remove();\r\n\r\n      //creates shape\r\n      if (shape === \"line\"){\r\n        helper.d3_drawShapes(shape, shapes, 0, shapeWidth);\r\n        shapes.attr(\"stroke-width\", type.feature);\r\n      } else {\r\n        helper.d3_drawShapes(shape, shapes, type.feature, type.feature, type.feature, path);\r\n      }\r\n\r\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix)\r\n\r\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\r\n      cell = cellEnter.merge(cell);\r\n\r\n      //sets placement\r\n      var text = cell.selectAll(\"text\"),\r\n        shapeSize = shapes.nodes().map(\r\n          function(d, i){\r\n            var bbox = d.getBBox()\r\n            var stroke = scale(type.data[i]);\r\n\r\n            if (shape === \"line\" && orient === \"horizontal\") {\r\n              bbox.height = bbox.height + stroke;\r\n            } else if (shape === \"line\" && orient === \"vertical\"){\r\n              bbox.width = bbox.width;\r\n            }\r\n\r\n            return bbox;\r\n        });\r\n\r\n      var maxH = max(shapeSize, function(d){ return d.height + d.y; }),\r\n      maxW = max(shapeSize, function(d){ return d.width + d.x; });\r\n\r\n      var cellTrans,\r\n      textTrans,\r\n      textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\r\n\r\n      //positions cells and text\r\n      if (orient === \"vertical\"){\r\n\r\n        cellTrans = function(d,i) {\r\n            var height = sum(shapeSize.slice(0, i + 1 ), function(d){ return d.height; });\r\n            return \"translate(0, \" + (height + i*shapePadding) + \")\"; };\r\n\r\n        textTrans = function(d,i) { return \"translate(\" + (maxW + labelOffset) + \",\" +\r\n          (shapeSize[i].y + shapeSize[i].height/2 + 5) + \")\"; };\r\n\r\n      } else if (orient === \"horizontal\"){\r\n        cellTrans = function(d,i) {\r\n            var width = sum(shapeSize.slice(0, i + 1 ), function(d){ return d.width; });\r\n            return \"translate(\" + (width + i*shapePadding) + \",0)\"; };\r\n\r\n        textTrans = function(d,i) { return \"translate(\" + (shapeSize[i].width*textAlign  + shapeSize[i].x) + \",\" +\r\n              (maxH + labelOffset ) + \")\"; };\r\n      }\r\n\r\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);\r\n      helper.d3_title(svg, title, classPrefix);\r\n\r\n      cell.transition().style(\"opacity\", 1);\r\n\r\n    }\r\n\r\n  legend.scale = function(_) {\r\n    if (!arguments.length) return scale;\r\n    scale = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.cells = function(_) {\r\n    if (!arguments.length) return cells;\r\n    if (_.length > 1 || _ >= 2 ){\r\n      cells = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n\r\n  legend.shape = function(_, d) {\r\n    if (!arguments.length) return shape;\r\n    if (_ == \"rect\" || _ == \"circle\" || _ == \"line\" ){\r\n      shape = _;\r\n      path = d;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.shapeWidth = function(_) {\r\n    if (!arguments.length) return shapeWidth;\r\n    shapeWidth = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.shapePadding = function(_) {\r\n    if (!arguments.length) return shapePadding;\r\n    shapePadding = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.labels = function(_) {\r\n    if (!arguments.length) return labels;\r\n    labels = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelAlign = function(_) {\r\n    if (!arguments.length) return labelAlign;\r\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\r\n      labelAlign = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.labelFormat = function(_) {\r\n    if (!arguments.length) return labelFormat;\r\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelOffset = function(_) {\r\n    if (!arguments.length) return labelOffset;\r\n    labelOffset = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelDelimiter = function(_) {\r\n    if (!arguments.length) return labelDelimiter;\r\n    labelDelimiter = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.orient = function(_){\r\n    if (!arguments.length) return orient;\r\n    _ = _.toLowerCase();\r\n    if (_ == \"horizontal\" || _ == \"vertical\") {\r\n      orient = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.ascending = function(_) {\r\n    if (!arguments.length) return ascending;\r\n    ascending = !!_;\r\n    return legend;\r\n  };\r\n\r\n  legend.classPrefix = function(_) {\r\n    if (!arguments.length) return classPrefix;\r\n    classPrefix = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.title = function(_) {\r\n    if (!arguments.length) return title;\r\n    title = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.on = function(){\r\n    var value = legendDispatcher.on.apply(legendDispatcher, arguments)\r\n    return value === legendDispatcher ? legend : value;\r\n  }\r\n\r\n  return legend;\r\n\r\n};\r\n","import helper from './legend';\r\nimport { dispatch } from 'd3-dispatch';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { format } from 'd3-format';\r\nimport { max } from 'd3-array';\r\n\r\nexport default function symbol(){\r\n\r\n  var scale = scaleLinear(),\r\n    shape = \"path\",\r\n    shapeWidth = 15,\r\n    shapeHeight = 15,\r\n    shapeRadius = 10,\r\n    shapePadding = 5,\r\n    cells = [5],\r\n    labels = [],\r\n    classPrefix = \"\",\r\n    useClass = false,\r\n    title = \"\",\r\n    labelFormat = format(\".01f\"),\r\n    labelAlign = \"middle\",\r\n    labelOffset = 10,\r\n    labelDelimiter = \"to\",\r\n    orient = \"vertical\",\r\n    ascending = false,\r\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\r\n\r\n    function legend(svg){\r\n\r\n      var type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\r\n        legendG = svg.selectAll('g').data([scale]);\r\n\r\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\r\n\r\n      var cell = svg.select('.' + classPrefix + 'legendCells')\r\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data),\r\n        cellEnter = cell.enter().append(\"g\")\r\n          .attr(\"class\", classPrefix + \"cell\"),//.style(\"opacity\", 1e-6),\r\n        shapeEnter = cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\"),\r\n        shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\r\n\r\n      //add event handlers\r\n      helper.d3_addEvents(cellEnter, legendDispatcher);\r\n\r\n      //remove old shapes\r\n      cell.exit().transition().style(\"opacity\", 0).remove();\r\n\r\n      helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, type.feature);\r\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix)\r\n\r\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\r\n      cell = cellEnter.merge(cell);\r\n\r\n      // sets placement\r\n      var text = cell.selectAll(\"text\"),\r\n        shapeSize = shapes.nodes().map( function(d){ return d.getBBox(); });\r\n\r\n      var maxH = max(shapeSize, function(d){ return d.height; }),\r\n      maxW = max(shapeSize, function(d){ return d.width; });\r\n\r\n      var cellTrans,\r\n      textTrans,\r\n      textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\r\n\r\n      //positions cells and text\r\n      if (orient === \"vertical\"){\r\n        cellTrans = function(d,i) { return \"translate(0, \" + (i * (maxH + shapePadding)) + \")\"; };\r\n        textTrans = function(d,i) { return \"translate(\" + (maxW + labelOffset) + \",\" +\r\n              (shapeSize[i].y + shapeSize[i].height/2 + 5) + \")\"; };\r\n\r\n      } else if (orient === \"horizontal\"){\r\n        cellTrans = function(d,i) { return \"translate(\" + (i * (maxW + shapePadding)) + \",0)\"; };\r\n        textTrans = function(d,i) { return \"translate(\" + (shapeSize[i].width*textAlign  + shapeSize[i].x) + \",\" +\r\n              (maxH + labelOffset ) + \")\"; };\r\n      }\r\n\r\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);\r\n      helper.d3_title(svg, title, classPrefix);\r\n      cell.transition().style(\"opacity\", 1);\r\n\r\n    }\r\n\r\n\r\n  legend.scale = function(_) {\r\n    if (!arguments.length) return scale;\r\n    scale = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.cells = function(_) {\r\n    if (!arguments.length) return cells;\r\n    if (_.length > 1 || _ >= 2 ){\r\n      cells = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.shapePadding = function(_) {\r\n    if (!arguments.length) return shapePadding;\r\n    shapePadding = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.labels = function(_) {\r\n    if (!arguments.length) return labels;\r\n    labels = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelAlign = function(_) {\r\n    if (!arguments.length) return labelAlign;\r\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\r\n      labelAlign = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.labelFormat = function(_) {\r\n    if (!arguments.length) return labelFormat;\r\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelOffset = function(_) {\r\n    if (!arguments.length) return labelOffset;\r\n    labelOffset = +_;\r\n    return legend;\r\n  };\r\n\r\n  legend.labelDelimiter = function(_) {\r\n    if (!arguments.length) return labelDelimiter;\r\n    labelDelimiter = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.orient = function(_){\r\n    if (!arguments.length) return orient;\r\n    _ = _.toLowerCase();\r\n    if (_ == \"horizontal\" || _ == \"vertical\") {\r\n      orient = _;\r\n    }\r\n    return legend;\r\n  };\r\n\r\n  legend.ascending = function(_) {\r\n    if (!arguments.length) return ascending;\r\n    ascending = !!_;\r\n    return legend;\r\n  };\r\n\r\n  legend.classPrefix = function(_) {\r\n    if (!arguments.length) return classPrefix;\r\n    classPrefix = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.title = function(_) {\r\n    if (!arguments.length) return title;\r\n    title = _;\r\n    return legend;\r\n  };\r\n\r\n  legend.on = function(){\r\n    var value = legendDispatcher.on.apply(legendDispatcher, arguments)\r\n    return value === legendDispatcher ? legend : value;\r\n  }\r\n\r\n  return legend;\r\n\r\n};\r\n","export const thresholdLabels = function({ i, genLength, generatedLabels }){\r\n\r\n  if (i === 0 ){\r\n    return generatedLabels[i].replace('NaN to', 'Less than')\r\n  } else if (i === genLength - 1) {\r\n    return `More than ${generatedLabels[genLength - 1].replace(' to NaN', '')}`\r\n  }\r\n  return generatedLabels[i]\r\n}\r\n\r\nexport default {\r\n  thresholdLabels\r\n}\r\n","import legendColor from './src/color'\r\nimport legendSize from './src/size'\r\nimport legendSymbol from './src/symbol'\r\nimport legendHelpers from './src/helpers'\r\n\r\nexport default {\r\n  legendColor,\r\n  legendSize,\r\n  legendSymbol,\r\n  legendHelpers\r\n};\r\n"],"names":["d3_identity","d","d3_mergeLabels","gen","labels","domain","range","length","i","push","customLabels","genLength","generatedLabels","d3_linearLegend","scale","cells","labelFormat","data","increment","map","feature","d3_quantLegend","labelDelimiter","invert","invertExtent","d3_ordinalLegend","d3_drawShapes","shape","shapes","shapeHeight","shapeWidth","shapeRadius","path","attr","d3_addText","svg","enter","classPrefix","append","selectAll","text","d3_calcType","ascending","type","ticks","d3_reverse","arr","mirror","l","d3_placement","orient","cell","cellTrans","textTrans","labelAlign","shapeTrans","style","d3_addEvents","dispatcher","_","on","d3_cellOver","d3_cellOut","d3_cellClick","cellDispatcher","obj","call","d3_title","title","titleText","cellsSvg","select","yOffset","nodes","getBBox","height","xOffset","x","color","scaleLinear","shapePadding","useClass","format","labelOffset","legendDispatcher","dispatch","legend","helper","legendG","cellEnter","shapeEnter","exit","transition","remove","merge","textSize","shapeSize","cellWidths","width","textAlign","y","previousCellWidths","sum","slice","arguments","toLowerCase","value","apply","size","useStroke","bbox","stroke","maxH","max","maxW","symbol","thresholdLabels","replace","legendColor","legendSize","legendSymbol","legendHelpers"],"mappings":"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"}